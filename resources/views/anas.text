 // $name = 'LearnSchool_' . time() . '_' . rand() . '.' . $request->file('excel')->getClientOriginalExtension();

        // $request->file('excel')->move(public_path('uploads/files/excel'), $name);

        // $path = public_path('uploads/files/excel') . DIRECTORY_SEPARATOR . $name;

        // $rowsWithErrors = [];
        // $rowsInserted = 0;

        // $counter = 2;

        // SimpleExcelReader::create($path)->getRows()->each(function (array $row) use (&$rowsWithErrors, &$rowsInserted, &$counter) {

            // $rowNumber = $counter;

            // $email = $row['email'] ?? '';

            // if (!str_contains($email, '@')) {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: البريد الإلكتروني غير مكتمل ولا يحتوي على @";
            //     Log::warning('Email missing @ at row ' . $rowNumber . ': ' . json_encode($row));
            //     $counter++;
            //     return;
            // }

            // $parts = explode('@', $email);
            // $localPart = $parts[0] ?? '';
            // $domainPart = $parts[1] ?? '';

            // if (trim($localPart) === '' || trim($domainPart) === '') {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: البريد الإلكتروني غير مكتمل أو يحتوي على جزء فارغ";
            //     Log::warning('Empty local or domain part at row ' . $rowNumber . ': ' . json_encode($row));
            //     $counter++;
            //     return;
            // }

            // if (!preg_match('/^[a-zA-Z0-9._-]+$/', $localPart)) {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: الجزء الأول من البريد الإلكتروني يحتوي على رموز غير مسموحة";
            //     Log::warning('Invalid local part of email at row ' . $rowNumber . ': ' . json_encode($row));
            //     $counter++;
            //     return;
            // }
            // $hashedPassword = Hash::make('12345678');
            // $user = User::query()->firstOrCreate(
            //     ['email' => $email],
            //     ['password' => $hashedPassword]
            // );

            // $existingStudent = Student::query()
            //     ->where('parent_phone', $row['parent_phone'])
            //     ->where('user_id', '!=', $user->id)
            //     ->first();

            // if ($existingStudent) {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: رقم جوال ولي الأمر مكرر بالفعل لطالب آخر";
            //     Log::warning('Duplicate parent_phone in row ' . $rowNumber . ': ' . $row['parent_phone']);
            //     $counter++;
            //     return;
            // }

            // $grade = Grade::query()->where('tag', $row['grade'])->first();
            // if (!$grade) {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: المرحلة الدراسية غير موجودة";
            //     Log::warning('Grade not found in row ' . $rowNumber . ': ' . $row['grade']);
            //     $counter++;
            //     return;
            // }

            // $section = Section::query()->where('name', $row['section'])->first();
            // if (!$section) {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: الشعبة الدراسية غير موجودة";
            //     Log::warning('Section not found in row ' . $rowNumber . ': ' . $row['section']);
            //     $counter++;
            //     return;
            // }

            // $genderValue = strtolower($row['gender']);
            // $gender = null;

            // if (in_array($genderValue, ['male', 'm'])) {
            //     $gender = 'm';
            // } elseif (in_array($genderValue, ['female', 'fm'])) {
            //     $gender = 'fm';
            // } else {
            //     $rowsWithErrors[] = "السطر {$rowNumber}: الجنس غير صحيح";
            //     Log::warning('Unknown gender in row ' . $rowNumber . ': ' . $row['gender']);
            //     $counter++;
            //     return;
            // }

        //     $gradeId = $grade ? $grade->id : null;
        //     $sectionId = $section ? $section->id : null;

        //     Student::query()->updateOrCreate(
        //         ['user_id' => $user->id],
        //         [
        //             'first_name'    => $row['first_name'],
        //             'last_name'     => $row['last_name'],
        //             'parent_name'   => $row['parent_name'],
        //             'parent_phone'  => $row['parent_phone'],
        //             'gender'        => $gender,
        //             'date_of_birth' => $row['date_of_birth'],
        //             'grade_id'      => $gradeId,
        //             'section_id'    => $sectionId,
        //         ]
        //     );

        //     $rowsInserted++;
        //     $counter++;
        // });

        // if (!empty($rowsWithErrors)) {
        //     return response()->json([
        //         'error' => true,
        //         'message' => "تم استيراد {$rowsInserted} صف بنجاح. لكن يوجد أخطاء:<br>" . implode("<br>", $rowsWithErrors),
        //         'rowsWithErrors' => $rowsWithErrors
        //     ], 422);
        // }

        // return response()->json([
        //     'success' => "تم استيراد {$rowsInserted} صف بنجاح."
        // ]);
       